use prost_types::Timestamp;
use std::{
  convert::{TryFrom, TryInto},
  num::NonZeroU64,
};

use crate::proto;

#[derive(Debug)]
pub struct Snapshot {
  /// This is the complete size of the snapshot in bytes. The purpose of
  /// this field is to give CO guidance on how much space is needed to
  /// create a volume from this snapshot. The size of the volume MUST NOT
  /// be less than the size of the source snapshot. This field is
  /// OPTIONAL. If this field is not set, it indicates that this size is
  /// unknown. The value of this field MUST NOT be negative and a size of
  /// zero means it is unspecified.
  size_bytes: Option<NonZeroU64>,
  /// The identifier for this snapshot, generated by the plugin.
  /// This field is REQUIRED.
  /// This field MUST contain enough information to uniquely identify
  /// this specific snapshot vs all other snapshots supported by this
  /// plugin.
  /// This field SHALL be used by the CO in subsequent calls to refer to
  /// this snapshot.
  /// The SP is NOT responsible for global uniqueness of snapshot_id
  /// across multiple SPs.
  snapshot_id: String,
  /// Identity information for the source volume. Note that creating a
  /// snapshot from a snapshot is not supported here so the source has to
  /// be a volume. This field is REQUIRED.
  source_volume_id: String,
  /// Timestamp when the point-in-time snapshot is taken on the storage
  /// system. This field is REQUIRED.
  creation_time: Timestamp,
  /// Indicates if a snapshot is ready to use as a
  /// `volume_content_source` in a `CreateVolumeRequest`. The default
  /// value is false. This field is REQUIRED.
  ready_to_use: bool,
}

impl TryFrom<Snapshot> for proto::Snapshot {
  type Error = tonic::Status;

  fn try_from(value: Snapshot) -> Result<Self, Self::Error> {
    let size_bytes = value.size_bytes.map(|v| v.get() as i64).unwrap_or_default();
    let snapshot_id = value.snapshot_id;
    let source_volume_id = value.source_volume_id;
    let creation_time = Some(value.creation_time);
    let ready_to_use = value.ready_to_use;

    Ok(proto::Snapshot {
      size_bytes,
      snapshot_id,
      source_volume_id,
      creation_time,
      ready_to_use,
    })
  }
}

impl TryFrom<Snapshot> for proto::CreateSnapshotResponse {
  type Error = tonic::Status;

  fn try_from(value: Snapshot) -> Result<Self, Self::Error> {
    let snapshot = Some(value.try_into()?);

    Ok(proto::CreateSnapshotResponse { snapshot })
  }
}
